// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle pour les utilisateurs
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  devis         Devis[]
  avis          Avis[]
  reservations  Reservation[]
}

// Modèle pour les comptes d'authentification
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Modèle pour les sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modèle pour les tokens de vérification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modèle pour les services proposés
model Service {
  id          String   @id @default(cuid())
  nom         String
  description String   @db.Text
  prix        Float
  unite       String?  // ex: "par place", "par m²"
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  devisItems  DevisItem[]
  reservationItems ReservationItem[]
}

// Modèle pour les demandes de devis
model Devis {
  id          String     @id @default(cuid())
  nom         String
  prenom      String
  email       String
  telephone   String
  adresse     String?
  codePostal  String?
  ville       String?
  datePreferee DateTime?
  message     String?    @db.Text
  statut      String     @default("en_attente") // en_attente, accepte, refuse
  montantTotal Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  userId      String?
  user        User?      @relation(fields: [userId], references: [id])
  
  items       DevisItem[]
}

// Modèle pour les items de devis
model DevisItem {
  id        String   @id @default(cuid())
  quantite  Int
  prix      Float
  
  devisId   String
  devis     Devis    @relation(fields: [devisId], references: [id], onDelete: Cascade)
  
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
}

// Modèle pour les avis clients
model Avis {
  id        String   @id @default(cuid())
  note      Int      // 1-5
  commentaire String? @db.Text
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

// Modèle pour les réservations
model Reservation {
  id            String   @id @default(cuid())
  dateService   DateTime
  heureService  String
  statut        String   @default("confirmee") // confirmee, annulee, terminee
  montantTotal  Float
  paiementStatus String  @default("en_attente") // en_attente, paye
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  
  items         ReservationItem[]
}

// Modèle pour les items de réservation
model ReservationItem {
  id            String   @id @default(cuid())
  quantite      Int
  prix          Float
  
  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  
  serviceId     String
  service       Service  @relation(fields: [serviceId], references: [id])
}

// Modèle pour les réalisations (photos avant/après)
model Realisation {
  id          String   @id @default(cuid())
  titre       String
  description String?   @db.Text
  imageAvant  String
  imageApres  String
  categorie   String    // canape, matelas, tapis, etc.
  createdAt   DateTime @default(now())
}

// Modèle pour les messages de contact
model Contact {
  id        String   @id @default(cuid())
  nom       String
  email     String
  telephone String?
  message   String   @db.Text
  lu        Boolean  @default(false)
  createdAt DateTime @default(now())
}
